/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Things3Plugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/url.ts
function urlEncode(line) {
  line = encodeURIComponent(line);
  return line;
}
function constructDeeplink(fileName, vaultName) {
  const url = `obsidian://open?vault=${vaultName}&file=${fileName}`;
  return url;
}

// src/things3.ts
function createTodo(todo, deepLink) {
  const url = `things:///add?title=${todo.title}&notes=${deepLink}&when=${todo.date}&x-success=obsidian://things-sync-id&tags=${todo.tags}`;
  window.open(url);
}
function updateTodo(todoId, completed, authToken) {
  const url = `things:///update?id=${todoId}&completed=${completed}&auth-token=${authToken}`;
  window.open(url);
}
function createTodoFromNote(todo, deepLink) {
  const url = `things:///add?title=${todo.title}&notes=${deepLink}&when=${todo.date}`;
  window.open(url);
}

// src/extractor.ts
function extractDate(line) {
  const regex = /^(19|20)\d\d([- /.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])/;
  let date = "";
  const res = line.match(regex);
  if (res) {
    date = res[0];
  }
  return date;
}
function extractTitle(line) {
  const regex = /[^#\s\-\[\]*](.*)/gs;
  const content = line.match(regex);
  let title = "";
  if (content != null) {
    title = content[0];
  }
  return title;
}
function extractTags(line, setting_tags) {
  const regex = /#([^\s]+)/gs;
  const array = [...line.matchAll(regex)];
  const tag_array = array.map((x) => x[1]);
  if (setting_tags.length > 0) {
    tag_array.push(setting_tags);
  }
  line = line.replace(regex, "");
  const tags = tag_array.join(",");
  return tags;
}
function extractTarget(line) {
  const regexId = /id=(\w+)/;
  const id = line.match(regexId);
  let todoId;
  if (id != null) {
    todoId = id[1];
  } else {
    todoId = "";
  }
  const regexStatus = /\[(.)\]/;
  const status = line.match(regexStatus);
  let afterStatus;
  if (status && status[1] == " ") {
    afterStatus = "true";
  } else {
    afterStatus = "false";
  }
  return { todoId, afterStatus };
}

// src/main.ts
function getCurrentLine(editor, view) {
  const lineNumber = editor.getCursor().line;
  const lineText = editor.getLine(lineNumber);
  return lineText;
}
var DEFAULT_SETTINGS = {
  authToken: "",
  defaultTags: ""
};
function contructTodo(line, settings, fileName) {
  line = line.trim();
  const tags = extractTags(line, settings.defaultTags);
  line = line.replace(/#([^\s]+)/gs, "");
  const todo = {
    title: extractTitle(line),
    tags,
    date: extractDate(fileName)
  };
  return todo;
}
var Things3Plugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new Things3SyncSettingTab(this.app, this));
    this.registerObsidianProtocolHandler("things-sync-id", async (id) => {
      const todoID = id["x-things-id"];
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (view == null) {
        return;
      } else {
        const editor = view.editor;
        const currentLine = getCurrentLine(editor, view);
        const firstLetterIndex = currentLine.search(/[^\s#\-\[\]*]/);
        const line = currentLine.substring(firstLetterIndex, currentLine.length);
        const editorPosition = view.editor.getCursor();
        const lineLength = view.editor.getLine(editorPosition.line).length;
        const startRange = {
          line: editorPosition.line,
          ch: firstLetterIndex
        };
        const endRange = {
          line: editorPosition.line,
          ch: lineLength
        };
        if (firstLetterIndex > 0) {
          view.editor.replaceRange(`[${line}](things:///show?id=${todoID})`, startRange, endRange);
        } else {
          view.editor.replaceRange(`- [ ] [${line}](things:///show?id=${todoID})`, startRange, endRange);
        }
      }
    });
    this.addCommand({
      id: "create-things-todo",
      name: "Create Things Todo",
      editorCallback: (editor, view) => {
        const workspace = this.app.workspace;
        const vault = this.app.vault;
        const fileTitle = workspace.getActiveFile();
        if (fileTitle == null) {
          return;
        } else {
          let fileName = urlEncode(fileTitle.name);
          fileName = fileName.replace(/\.md$/, "");
          const vaultName = urlEncode(vault.getName());
          const obsidianDeepLink = constructDeeplink(fileName, vaultName);
          const encodedLink = urlEncode(obsidianDeepLink);
          const line = getCurrentLine(editor, view);
          const todo = contructTodo(line, this.settings, fileName);
          createTodo(todo, encodedLink);
        }
      }
    });
    this.addCommand({
      id: "toggle-things-todo",
      name: "Toggle Things Todo",
      editorCallback: (editor, view) => {
        const workspace = this.app.workspace;
        const fileTitle = workspace.getActiveFile();
        if (fileTitle == null) {
          return;
        } else {
          const line = getCurrentLine(editor, view);
          const target = extractTarget(line);
          if (target.todoId == "") {
            new import_obsidian.Notice(`This is not a things3 todo`);
          } else {
            view.app.commands.executeCommandById("editor:toggle-checklist-status");
            updateTodo(target.todoId, target.afterStatus, this.settings.authToken);
            new import_obsidian.Notice(`${target.todoId} set completed:${target.afterStatus} on things3`);
          }
        }
      }
    });
    this.addCommand({
      id: "create-things-todo-from-note",
      name: "Create Things Todo from Note",
      editorCallback: (editor, view) => {
        const workspace = this.app.workspace;
        const vault = this.app.vault;
        const fileTitle = workspace.getActiveFile();
        if (fileTitle == null) {
          return;
        } else {
          let fileName = urlEncode(fileTitle.name);
          fileName = fileName.replace(/\.md$/, "");
          const vaultName = urlEncode(vault.getName());
          const obsidianDeepLink = constructDeeplink(fileName, vaultName);
          const encodedLink = urlEncode(obsidianDeepLink);
          const todo = contructTodo(fileName, this.settings, fileName);
          createTodoFromNote(todo, encodedLink);
        }
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var Things3SyncSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Obsidian Things3 Sync." });
    new import_obsidian.Setting(containerEl).setName("Auth Token").setDesc("Require Things3 Auth Token for syncing Todo status; Get Auth Token			via Things3 -> Preferece -> General -> Enable things URL -> Manage.").addText((text) => text.setPlaceholder("Leave Things3 Auth Token here").setValue(this.plugin.settings.authToken).onChange(async (value) => {
      this.plugin.settings.authToken = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Tags").setDesc("The default tags for Obsidian Todo; Using comma(,) 			to separate multiple tags; Leave this in blank for no default tags").addText((text) => text.setPlaceholder("Leave your tags here").setValue(this.plugin.settings.defaultTags).onChange(async (value) => {
      this.plugin.settings.defaultTags = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
